#LA27
from abc import ABC, abstractmethod

class NinjaTurtle(ABC):
    @property
    @abstractmethod
    def name(self):
        pass

class Leonardo(NinjaTurtle):
    def __init__(self, real_name, alias):
        self.real_name = real_name
        self._alias = alias

    @property
    def name(self):
        return self._alias

class Michelangelo(NinjaTurtle):
    def __init__(self, real_name, alias):
        self.real_name = real_name
        self._alias = alias

    @property
    def name(self):
        return self._alias

class Donatello(NinjaTurtle):
    def __init__(self, real_name, alias):
        self.real_name = real_name
        self._alias = alias

    @property
    def name(self):
        return self._alias

class Raphael(NinjaTurtle):
    def __init__(self, real_name, alias):
        self.real_name = real_name
        self._alias = alias

    @property
    def name(self):
        return self._alias

def create_new_object():
    leonardo_alt = Leonardo("Leonardo Alt", "Leon")
    print(f"New Turtle Alias: {leonardo_alt.name}")

def main():
    leonardo = Leonardo("Leonardo", "Leo")
    michelangelo = Michelangelo("Michelangelo", "Mikey")
    donatello = Donatello("Donatello", "Donnie")
    raphael = Raphael("Raphael", "Raph")

    turtles = [leonardo, michelangelo, donatello, raphael]

    for turtle in turtles:
        print(f"Turtle Alias: {turtle.name}")

    create_new_object()

if __name__ == "__main__":
    main()
